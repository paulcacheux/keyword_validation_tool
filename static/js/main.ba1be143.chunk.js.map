{"version":3,"sources":["state/actions.ts","fileUpload.ts","api.ts","state/types.ts","components/FileUploadButton.tsx","components/FileUploadBox.tsx","components/ScoringTable.tsx","components/DownloadButton.tsx","components/DownloadBox.tsx","components/NavigationInfo.tsx","ManualPage.tsx","DocumentList.tsx","components/UploadResultBox.tsx","RemotePage.tsx","App.tsx","serviceWorker.ts","state/reducers.ts","index.tsx"],"names":["AsyncStatus","readAsText","blob","Promise","resolve","reject","reader","FileReader","onload","content","result","parsedContent","JSON","parse","onerror","BASE_PATH","fetchSourceDocumentList","controller","a","fetch","signal","response","json","fetchSourceDocument","id","postFetch","url","body","method","headers","Accept","stringify","checkStatus","responseData","status","Error","uploadResultDocument","doc","asyncSuccess","type","payload","SUCCESS","asyncError","error","ERROR","loadLocalFileRequest","dispatch","changeRecordKeptState","word","kept","useStyles","makeStyles","theme","button","margin","spacing","fileInput","display","UploadButton","classes","useDispatch","handleFileInput","event","files","target","Button","variant","color","component","className","startIcon","onChange","root","marginTop","padding","FileUploadBox","Paper","elevation","Typography","table","minWidth","head","backgroundColor","palette","primary","main","headCell","common","white","keptRow","success","light","removeRow","buttonBox","width","GreenButton","withStyles","getContrastText","green","marginRight","RedButton","red","YellowButton","yellow","ScoringRow","info","buttons","undefined","onClick","classRow","TableRow","TableCell","align","score","ScoringTable","canBeEmpty","useSelector","state","words","TableContainer","Table","aria-label","TableHead","TableBody","Object","keys","map","key","length","CircularProgress","DownloadButton","fileName","data","hrefData","download","href","DownloadBox","NavigationInfo","path","Breadcrumbs","Link","to","ManualPage","gridContainer","DocumentList","useState","documents","setDocuments","setError","useEffect","AbortController","list","name","message","fetcher","abort","Alert","severity","Grid","container","index","item","xs","sm","lg","Card","CardContent","CardActions","size","UploadResultBox","successMsg","setSuccesMsg","errorMsg","setErrorMsg","resultDocument","areAllTagged","handleClick","RemotePage","stringId","useParams","parseInt","fetchRemoteFile","currentFileName","title","flexGrow","marginBottom","Boolean","window","location","hostname","match","defaultState","localParsedContentToWords","wordInfos","remoteParsedContentToWords","store","createStore","action","newWords","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Fragment","CssBaseline","AppBar","position","Toolbar","Container","fixed","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ba1be143.chunk.js","sourcesContent":["import { LOAD_LOCAL_FILE, CHANGE_RECORD_KEPT_STATE, FETCH_SOURCE_DOCUMENT, CLEAN_STATE_WORDS } from './types';\nimport { FileContent, readAsText } from '../fileUpload';\nimport { State } from './types';\nimport { ThunkAction } from 'redux-thunk';\nimport { SourceDocumentData, fetchSourceDocument } from '../api';\n\nexport enum AsyncStatus {\n    SUCCESS,\n    ERROR,\n}\n\ninterface AsyncSuccessAction<T, P> {\n    type: T;\n    status: AsyncStatus.SUCCESS;\n    payload: P;\n}\n\ninterface AsyncErrorAction<T> {\n    type: T;\n    status: AsyncStatus.ERROR;\n    error: string;\n}\n\nexport type AsyncAction<T, P> = AsyncSuccessAction<T, P> | AsyncErrorAction<T>;\n\nexport type LoadLocalFileAction = AsyncAction<typeof LOAD_LOCAL_FILE, FileContent>;\nexport type FetchSourceDocumentAction = AsyncAction<typeof FETCH_SOURCE_DOCUMENT, SourceDocumentData>;\n\ninterface CleanStateWords {\n    type: typeof CLEAN_STATE_WORDS;\n}\n\ninterface ChangeRecordKeptStateAction {\n    type: typeof CHANGE_RECORD_KEPT_STATE;\n    word: string;\n    kept?: boolean;\n}\n\nexport type RootAction =\n    | LoadLocalFileAction\n    | FetchSourceDocumentAction\n    | ChangeRecordKeptStateAction\n    | CleanStateWords;\n\ntype ThunkResult<R> = ThunkAction<R, State, undefined, RootAction>;\n\nconst asyncSuccess = <T, P>(type: T, payload: P): AsyncAction<T, P> => {\n    return {\n        type,\n        status: AsyncStatus.SUCCESS,\n        payload,\n    };\n};\n\nconst asyncError = <T, P>(type: T, error: string): AsyncAction<T, P> => {\n    return {\n        type,\n        status: AsyncStatus.ERROR,\n        error,\n    };\n};\n\nexport const loadLocalFileRequest = (blob: Blob): ThunkResult<Promise<void>> => {\n    return async (dispatch): Promise<void> => {\n        try {\n            dispatch({ type: CLEAN_STATE_WORDS });\n            const content = await readAsText(blob);\n            dispatch(asyncSuccess(LOAD_LOCAL_FILE, content) as LoadLocalFileAction);\n        } catch (error) {\n            dispatch(asyncError(LOAD_LOCAL_FILE, error) as LoadLocalFileAction);\n        }\n    };\n};\n\nexport const fetchRemoteFile = (id: number): ThunkResult<Promise<void>> => {\n    return async (dispatch): Promise<void> => {\n        try {\n            dispatch({ type: CLEAN_STATE_WORDS });\n            const content = await fetchSourceDocument(id);\n            dispatch(asyncSuccess(FETCH_SOURCE_DOCUMENT, content) as FetchSourceDocumentAction);\n        } catch (error) {\n            dispatch(asyncError(FETCH_SOURCE_DOCUMENT, error) as FetchSourceDocumentAction);\n        }\n    };\n};\n\nexport const changeRecordKeptState = (word: string, kept?: boolean): ChangeRecordKeptStateAction => {\n    return {\n        type: CHANGE_RECORD_KEPT_STATE,\n        word,\n        kept,\n    };\n};\n","export interface FileContent {\n    [word: string]: number;\n}\n\nexport const readAsText = (blob: Blob): Promise<FileContent> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (): void => {\n            const content = reader.result;\n            if (typeof content === 'string') {\n                const parsedContent = JSON.parse(content);\n                resolve(parsedContent);\n            } else {\n                reject('Expected string file content');\n            }\n        };\n        reader.onerror = reject;\n        reader.readAsText(blob);\n    });\n};\n","const BASE_PATH = 'http://localhost:5000';\n\nexport type SourceDocumentList = Array<{ id: number; name: string }>;\n\nexport const fetchSourceDocumentList = async (controller?: AbortController): Promise<SourceDocumentList> => {\n    const response = await fetch(BASE_PATH + '/', { signal: controller?.signal });\n    return await response.json();\n};\n\nexport interface SourceDocumentData {\n    id: number;\n    name: string;\n    data: { [data: string]: number };\n}\n\nexport const fetchSourceDocument = async (id: number, controller?: AbortController): Promise<SourceDocumentData> => {\n    const response = await fetch(BASE_PATH + '/' + id, { signal: controller?.signal });\n    return await response.json();\n};\n\nexport const postFetch = async <T>(url: string, body: T): Promise<Response> => {\n    return await fetch(url, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    });\n};\n\nexport interface ResultDocument {\n    [word: string]: number;\n}\n\nconst checkStatus = async (response: Response): Promise<void> => {\n    const responseData = await response.json();\n    if (responseData.status && responseData.status === 'ok') {\n        return;\n    }\n    throw new Error('error uploading document');\n};\n\nexport const uploadResultDocument = async (id: number, doc: ResultDocument): Promise<void> => {\n    const response = await postFetch(BASE_PATH + '/' + id, doc);\n    checkStatus(response);\n};\n","export const CLEAN_STATE_WORDS = 'CLEAN_STATE_WORDS';\nexport const LOAD_LOCAL_FILE = 'LOAD_LOCAL_FILE';\nexport const CHANGE_RECORD_KEPT_STATE = 'CHANGE_RECORD_KEPT_STATE';\nexport const FETCH_SOURCE_DOCUMENT = 'FETCH_SOURCE_DOCUMENT';\nexport const UPLOAD_RESULT_DOCUMENT = 'UPLOAD_RESULT_DOCUMENT';\n\nexport interface WordInfo {\n    score: number;\n    kept?: boolean;\n}\n\nexport interface State {\n    currentFileName?: string;\n    words: {\n        [word: string]: WordInfo;\n    };\n    error?: string;\n}\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { useDispatch } from 'react-redux';\nimport { loadLocalFileRequest } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    fileInput: {\n        display: 'none',\n    },\n}));\n\nexport const UploadButton: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleFileInput = async (event: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const files = event.target.files;\n        if (files) {\n            dispatch(loadLocalFileRequest(files[0]));\n        }\n    };\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                color=\"default\"\n                component=\"label\"\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Upload\n                <input type=\"file\" className={classes.fileInput} onChange={handleFileInput} />\n            </Button>\n        </>\n    );\n};\n","import React from 'react';\nimport { Paper, Typography, makeStyles } from '@material-ui/core';\nimport { UploadButton } from './FileUploadButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n}));\n\nexport const FileUploadBox: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Typography variant=\"h3\">File upload</Typography>\n            <UploadButton />\n        </Paper>\n    );\n};\n","import React from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    Button,\n    withStyles,\n    CircularProgress,\n} from '@material-ui/core';\nimport { green, red, yellow } from '@material-ui/core/colors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State, WordInfo } from '../state/types';\nimport { changeRecordKeptState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n    table: {\n        minWidth: 650,\n    },\n    head: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    headCell: {\n        color: theme.palette.common.white,\n    },\n    keptRow: {\n        backgroundColor: theme.palette.success.light,\n    },\n    removeRow: {\n        backgroundColor: theme.palette.error.light,\n    },\n    buttonBox: {\n        width: '30vh',\n    },\n}));\n\nconst GreenButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(green[500]),\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n        marginRight: '8px',\n    },\n}))(Button);\n\nconst RedButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(red[500]),\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n}))(Button);\n\nconst YellowButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(yellow[500]),\n        backgroundColor: yellow[500],\n        '&:hover': {\n            backgroundColor: yellow[700],\n        },\n    },\n}))(Button);\n\ninterface ScoringRowProps {\n    word: string;\n    info: WordInfo;\n}\n\nexport const ScoringRow: React.FC<ScoringRowProps> = ({ word, info }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleOk = (): void => {\n        dispatch(changeRecordKeptState(word, true));\n    };\n\n    const handleReject = (): void => {\n        dispatch(changeRecordKeptState(word, false));\n    };\n\n    const handleRestore = (): void => {\n        dispatch(changeRecordKeptState(word, undefined));\n    };\n\n    let buttons = null;\n    if (info.kept === undefined) {\n        buttons = (\n            <>\n                <GreenButton variant=\"contained\" onClick={handleOk}>\n                    OK\n                </GreenButton>\n                <RedButton variant=\"contained\" onClick={handleReject}>\n                    Reject\n                </RedButton>\n            </>\n        );\n    } else {\n        buttons = (\n            <>\n                <YellowButton variant=\"contained\" onClick={handleRestore}>\n                    Restore\n                </YellowButton>\n            </>\n        );\n    }\n\n    let classRow = '';\n    if (info.kept === true) {\n        classRow = classes.keptRow;\n    } else if (info.kept === false) {\n        classRow = classes.removeRow;\n    }\n\n    return (\n        <TableRow className={classRow}>\n            <TableCell align=\"left\">{word}</TableCell>\n            <TableCell align=\"right\">{info.score}</TableCell>\n            <TableCell align=\"right\" className={classes.buttonBox}>\n                {buttons}\n            </TableCell>\n        </TableRow>\n    );\n};\n\nexport const ScoringTable: React.FC<{ canBeEmpty?: boolean }> = ({ canBeEmpty }) => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    return (\n        <TableContainer component={Paper} className={classes.root} elevation={3}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow className={classes.head}>\n                        <TableCell align=\"left\" className={classes.headCell}>\n                            Word\n                        </TableCell>\n                        <TableCell align=\"right\" className={classes.headCell}>\n                            Score\n                        </TableCell>\n                        <TableCell></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(content).map(word => {\n                        return <ScoringRow key={word} word={word} info={content[word]} />;\n                    })}\n                </TableBody>\n            </Table>\n            {!canBeEmpty && Object.keys(content).length === 0 && <CircularProgress />}\n        </TableContainer>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    fileInput: {\n        display: 'none',\n    },\n}));\n\ninterface DownloadButtonProps {\n    fileName: string;\n    data: string;\n}\n\nexport const DownloadButton: React.FC<DownloadButtonProps> = ({ fileName, data }) => {\n    const classes = useStyles();\n\n    const hrefData = 'data:text/plain;charset=utf-8,' + data;\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                component=\"a\"\n                color=\"default\"\n                download={fileName}\n                href={hrefData}\n                className={classes.button}\n                startIcon={<GetAppIcon />}\n            >\n                Download\n            </Button>\n        </>\n    );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { State } from '../state/types';\nimport { Paper, makeStyles, Typography } from '@material-ui/core';\nimport { DownloadButton } from './DownloadButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport const DownloadBox: React.FC = () => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    const result: { [word: string]: number } = {};\n    for (const word in content) {\n        const info = content[word];\n        if (info.kept) {\n            result[word] = content[word].score;\n        }\n    }\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Typography variant=\"h3\">Output</Typography>\n            <DownloadButton fileName=\"output.json\" data={JSON.stringify(result)} />\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { Typography, Breadcrumbs, Link as MUILink } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface NavigationInfoProps {\n    path?: string;\n}\n\nexport const NavigationInfo: React.FC<NavigationInfoProps> = ({ path }) => {\n    return (\n        <>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <MUILink color=\"inherit\" component={Link} to=\"/\">\n                    Source Documents\n                </MUILink>\n\n                {path && <Typography color=\"textPrimary\">{path}</Typography>}\n            </Breadcrumbs>\n        </>\n    );\n};\n","import React from 'react';\nimport { FileUploadBox } from './components/FileUploadBox';\nimport { ScoringTable } from './components/ScoringTable';\nimport { DownloadBox } from './components/DownloadBox';\nimport { NavigationInfo } from './components/NavigationInfo';\n\nexport const ManualPage: React.FC = () => {\n    return (\n        <>\n            <NavigationInfo path=\"manual\" />\n            <FileUploadBox />\n            <ScoringTable canBeEmpty />\n            <DownloadBox />\n        </>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport { SourceDocumentList, fetchSourceDocumentList } from './api';\nimport { Alert } from '@material-ui/lab';\nimport { Card, Typography, CardContent, Grid, makeStyles, Button, CardActions } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n    gridContainer: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\nexport const DocumentList: React.FC = () => {\n    const classes = useStyles();\n\n    const [documents, setDocuments] = useState<SourceDocumentList>([]);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const controller = new AbortController();\n\n        async function fetcher(): Promise<void> {\n            try {\n                const list = await fetchSourceDocumentList(controller);\n                setDocuments(list);\n                setError(null);\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    setError(error.message);\n                    setDocuments([]);\n                }\n            }\n        }\n\n        fetcher();\n\n        return (): void => {\n            controller.abort();\n        };\n    }, []);\n\n    return (\n        <>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            <Button color=\"secondary\" variant=\"contained\" component={Link} to=\"/manual\">\n                Manual\n            </Button>\n            <Grid container spacing={2} className={classes.gridContainer}>\n                {documents.map((doc, index) => (\n                    <Grid item xs={12} sm={4} lg={3} key={index}>\n                        <Card elevation={3}>\n                            <CardContent>\n                                <Typography variant=\"h5\" component=\"h2\">\n                                    {doc.name}\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    component={Link}\n                                    to={`/${doc.id}`}\n                                >\n                                    Go\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { State } from '../state/types';\nimport { Paper, makeStyles, Button } from '@material-ui/core';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport { uploadResultDocument } from '../api';\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nexport const UploadResultBox: React.FC<{ id: number }> = ({ id }) => {\n    const classes = useStyles();\n\n    const [successMsg, setSuccesMsg] = useState<string | null>(null);\n    const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n    const words = useSelector((state: State) => state.words);\n\n    const resultDocument: { [word: string]: number } = {};\n    let areAllTagged = true;\n    for (const word in words) {\n        const info = words[word];\n        if (info.kept === undefined) {\n            areAllTagged = false;\n        }\n\n        if (info.kept === true) {\n            resultDocument[word] = info.score;\n        }\n    }\n\n    if (!areAllTagged || Object.keys(words).length === 0) {\n        return null;\n    }\n\n    const handleClick = async (): Promise<void> => {\n        try {\n            await uploadResultDocument(id, resultDocument);\n            setSuccesMsg('Successfully published document');\n            setErrorMsg(null);\n        } catch (error) {\n            setErrorMsg('Error: publishing document');\n            setSuccesMsg(null);\n        }\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n            {successMsg && <Alert severity=\"success\">{successMsg}</Alert>}\n\n            <Button\n                variant=\"contained\"\n                color=\"default\"\n                className={classes.button}\n                startIcon={<PublishIcon />}\n                onClick={handleClick}\n            >\n                Publish\n            </Button>\n        </Paper>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { ScoringTable } from './components/ScoringTable';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRemoteFile } from './state/actions';\nimport { useParams } from 'react-router-dom';\nimport { State } from './state/types';\nimport { NavigationInfo } from './components/NavigationInfo';\nimport { UploadResultBox } from './components/UploadResultBox';\n\nexport const RemotePage: React.FC = () => {\n    const dispatch = useDispatch();\n    const { id: stringId } = useParams();\n    const id = stringId ? parseInt(stringId) : null;\n\n    useEffect(() => {\n        if (id) {\n            dispatch(fetchRemoteFile(id));\n        }\n    }, [dispatch, id]);\n\n    const fileName = useSelector((state: State) => state.currentFileName);\n\n    if (!id) {\n        return null;\n    }\n\n    return (\n        <>\n            <NavigationInfo path={fileName} />\n            <ScoringTable />\n            <UploadResultBox id={id} />\n        </>\n    );\n};\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, Container, CssBaseline } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ManualPage } from './ManualPage';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport { DocumentList } from './DocumentList';\nimport { RemotePage } from './RemotePage';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nexport const App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Keyword Validation Tool\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed className={classes.container}>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <DocumentList />\n                        </Route>\n                        <Route path=\"/manual\">\n                            <ManualPage />\n                        </Route>\n                        <Route path=\"/:id\">\n                            <RemotePage />\n                        </Route>\n                    </Switch>\n                </Router>\n            </Container>\n        </React.Fragment>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import { LOAD_LOCAL_FILE, State, CHANGE_RECORD_KEPT_STATE, FETCH_SOURCE_DOCUMENT, CLEAN_STATE_WORDS } from './types';\nimport { RootAction, AsyncStatus } from './actions';\nimport { FileContent } from '../fileUpload';\nimport { SourceDocumentData } from '../api';\n\nconst defaultState: State = {\n    words: {},\n    error: undefined,\n};\n\nexport const localParsedContentToWords = (content: FileContent): State['words'] => {\n    const wordInfos: State['words'] = {};\n    for (const word in content) {\n        wordInfos[word] = { score: content[word], kept: undefined };\n    }\n    return wordInfos;\n};\n\nexport const remoteParsedContentToWords = (\n    content: SourceDocumentData,\n): { words: State['words']; currentFileName: string } => {\n    const words = localParsedContentToWords(content.data);\n    return { words, currentFileName: content.name };\n};\n\nexport const reducer = (state = defaultState, action: RootAction): State => {\n    switch (action.type) {\n        case CLEAN_STATE_WORDS:\n            return { currentFileName: undefined, error: undefined, words: {} };\n        case LOAD_LOCAL_FILE:\n            switch (action.status) {\n                case AsyncStatus.SUCCESS:\n                    return { words: localParsedContentToWords(action.payload), error: undefined };\n                case AsyncStatus.ERROR:\n                    return { words: {}, error: action.error };\n                default:\n                    return state;\n            }\n\n        case FETCH_SOURCE_DOCUMENT:\n            switch (action.status) {\n                case AsyncStatus.SUCCESS:\n                    return { ...remoteParsedContentToWords(action.payload), error: undefined };\n                case AsyncStatus.ERROR:\n                    return { words: {}, error: action.error };\n                default:\n                    return state;\n            }\n        case CHANGE_RECORD_KEPT_STATE:\n            const newWords = { ...state.words };\n            newWords[action.word].kept = action.kept;\n            return {\n                ...state,\n                error: undefined,\n                words: newWords,\n            };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}