{"version":3,"sources":["state/actions.ts","state/types.ts","components/UploadButton.tsx","components/FileUploadBox.tsx","components/ScoringTable.tsx","App.tsx","serviceWorker.ts","fileUpload.ts","state/sagas.ts","state/reducers.ts","index.tsx"],"names":["uploadFileSuccess","content","type","changeRecordKeptState","word","kept","useStyles","makeStyles","theme","button","margin","spacing","fileInput","display","UploadButton","classes","dispatch","useDispatch","handleFileInput","event","a","files","target","blob","Button","variant","color","component","className","startIcon","onChange","root","padding","FileUploadBox","useSelector","state","words","Paper","elevation","Typography","JSON","stringify","marginTop","table","minWidth","head","backgroundColor","palette","primary","main","headCell","common","white","keptRow","success","light","removeRow","error","GreenButton","withStyles","getContrastText","green","marginRight","RedButton","red","YellowButton","yellow","ScoringRow","info","buttons","undefined","onClick","classRow","TableRow","TableCell","align","score","ScoringTable","TableContainer","Table","aria-label","TableHead","TableBody","Object","keys","map","key","title","flexGrow","container","marginBottom","Boolean","window","location","hostname","match","readAsText","Promise","resolve","reject","reader","FileReader","onload","result","parsedContent","parse","onerror","uploadFile","fileUploadSaga","action","call","put","takeLatest","defaultState","parsedContentToWords","wordInfos","sagaMiddleware","createSagaMiddleware","store","createStore","newWords","composeWithDevTools","applyMiddleware","run","ReactDOM","render","Fragment","CssBaseline","AppBar","position","Toolbar","Container","fixed","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cd995f07.chunk.js","sourcesContent":["import { UPLOAD_FILE_REQUEST, UPLOAD_FILE_SUCCESS, UPLOAD_FILE_ERROR, CHANGE_RECORD_KEPT_STATE } from './types';\nimport { FileContent } from '../fileUpload';\n\nexport interface UploadFileRequestAction {\n    type: typeof UPLOAD_FILE_REQUEST;\n    blob: Blob;\n}\n\ninterface UploadFileSuccessAction {\n    type: typeof UPLOAD_FILE_SUCCESS;\n    content: FileContent;\n}\n\ninterface UploadFileErrorAction {\n    type: typeof UPLOAD_FILE_ERROR;\n    error: string;\n}\n\ninterface ChangeRecordKeptStateAction {\n    type: typeof CHANGE_RECORD_KEPT_STATE;\n    word: string;\n    kept?: boolean;\n}\n\nexport type RootAction =\n    | UploadFileRequestAction\n    | UploadFileSuccessAction\n    | UploadFileErrorAction\n    | ChangeRecordKeptStateAction;\n\nexport const uploadFileRequest = (blob: Blob): UploadFileRequestAction => {\n    return {\n        type: UPLOAD_FILE_REQUEST,\n        blob,\n    };\n};\n\nexport const uploadFileSuccess = (content: FileContent): UploadFileSuccessAction => {\n    return {\n        type: UPLOAD_FILE_SUCCESS,\n        content,\n    };\n};\n\nexport const uploadFileError = (error: string): UploadFileErrorAction => {\n    return {\n        type: UPLOAD_FILE_ERROR,\n        error,\n    };\n};\n\nexport const changeRecordKeptState = (word: string, kept?: boolean): ChangeRecordKeptStateAction => {\n    return {\n        type: CHANGE_RECORD_KEPT_STATE,\n        word,\n        kept,\n    };\n};\n","export const UPLOAD_FILE_REQUEST = 'UPLOAD_FILE_REQUEST';\nexport const UPLOAD_FILE_SUCCESS = 'UPLOAD_FILE_SUCCESS';\nexport const UPLOAD_FILE_ERROR = 'UPLOAD_FILE_ERROR';\nexport const CHANGE_RECORD_KEPT_STATE = 'CHANGE_RECORD_KEPT_STATE';\n\nexport interface WordInfo {\n    score: number;\n    kept?: boolean;\n}\n\nexport interface State {\n    words: {\n        [word: string]: WordInfo;\n    };\n    error?: string;\n}\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { useDispatch } from 'react-redux';\nimport { uploadFileRequest } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    fileInput: {\n        display: 'none',\n    },\n}));\n\nexport const UploadButton: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleFileInput = async (event: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const files = event.target.files;\n        if (files) {\n            dispatch(uploadFileRequest(files[0]));\n        }\n    };\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                color=\"default\"\n                component=\"label\"\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Upload\n                <input type=\"file\" className={classes.fileInput} onChange={handleFileInput} />\n            </Button>\n        </>\n    );\n};\n","import React from 'react';\nimport { Paper, Typography, makeStyles } from '@material-ui/core';\nimport { UploadButton } from './UploadButton';\nimport { State } from '../state/types';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}));\n\nexport const FileUploadBox: React.FC = () => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Typography variant=\"h3\">File upload</Typography>\n            <UploadButton />\n            <pre>{JSON.stringify(content)}</pre>\n        </Paper>\n    );\n};\n","import React from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    Button,\n    withStyles,\n} from '@material-ui/core';\nimport { green, red, yellow } from '@material-ui/core/colors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State, WordInfo } from '../state/types';\nimport { changeRecordKeptState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n    table: {\n        minWidth: 650,\n    },\n    head: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    headCell: {\n        color: theme.palette.common.white,\n    },\n    keptRow: {\n        backgroundColor: theme.palette.success.light,\n    },\n    removeRow: {\n        backgroundColor: theme.palette.error.light,\n    },\n}));\n\nconst GreenButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(green[500]),\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n        marginRight: '8px',\n    },\n}))(Button);\n\nconst RedButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(red[500]),\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n}))(Button);\n\nconst YellowButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(yellow[500]),\n        backgroundColor: yellow[500],\n        '&:hover': {\n            backgroundColor: yellow[700],\n        },\n    },\n}))(Button);\n\ninterface ScoringRowProps {\n    word: string;\n    info: WordInfo;\n}\n\nexport const ScoringRow: React.FC<ScoringRowProps> = ({ word, info }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleOk = (): void => {\n        dispatch(changeRecordKeptState(word, true));\n    };\n\n    const handleReject = (): void => {\n        dispatch(changeRecordKeptState(word, false));\n    };\n\n    const handleRestore = (): void => {\n        dispatch(changeRecordKeptState(word, undefined));\n    };\n\n    let buttons = null;\n    if (info.kept === undefined) {\n        buttons = (\n            <>\n                <GreenButton variant=\"contained\" onClick={handleOk}>\n                    OK\n                </GreenButton>\n                <RedButton variant=\"contained\" onClick={handleReject}>\n                    Reject\n                </RedButton>\n            </>\n        );\n    } else {\n        buttons = (\n            <>\n                <YellowButton variant=\"contained\" onClick={handleRestore}>\n                    Restore\n                </YellowButton>\n            </>\n        );\n    }\n\n    let classRow = '';\n    if (info.kept === true) {\n        classRow = classes.keptRow;\n    } else if (info.kept === false) {\n        classRow = classes.removeRow;\n    }\n\n    return (\n        <TableRow className={classRow}>\n            <TableCell align=\"left\">{word}</TableCell>\n            <TableCell align=\"right\">{info.score}</TableCell>\n            <TableCell align=\"right\">{buttons}</TableCell>\n        </TableRow>\n    );\n};\n\nexport const ScoringTable: React.FC = () => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    return (\n        <TableContainer component={Paper} className={classes.root} elevation={3}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow className={classes.head}>\n                        <TableCell align=\"left\" className={classes.headCell}>\n                            Word\n                        </TableCell>\n                        <TableCell align=\"right\" className={classes.headCell}>\n                            Score\n                        </TableCell>\n                        <TableCell></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(content).map(word => {\n                        return <ScoringRow key={word} word={word} info={content[word]} />;\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, Container, CssBaseline } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FileUploadBox } from './components/FileUploadBox';\nimport { ScoringTable } from './components/ScoringTable';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nexport const App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Samuel Data Analysis\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed className={classes.container}>\n                <FileUploadBox />\n                <ScoringTable />\n            </Container>\n        </React.Fragment>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export interface FileContent {\n    [word: string]: number;\n}\n\nexport const readAsText = (blob: Blob): Promise<FileContent> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (): void => {\n            const content = reader.result;\n            if (typeof content === 'string') {\n                const parsedContent = JSON.parse(content);\n                resolve(parsedContent);\n            } else {\n                reject('Expected string file content');\n            }\n        };\n        reader.onerror = reject;\n        reader.readAsText(blob);\n    });\n};\n","import { UPLOAD_FILE_REQUEST } from './types';\nimport { UploadFileRequestAction, uploadFileSuccess } from './actions';\nimport { call, put, takeLatest, ForkEffect, Effect } from 'redux-saga/effects';\nimport { readAsText, FileContent } from '../fileUpload';\n\nfunction* uploadFile(action: UploadFileRequestAction): Generator<Effect<any>> {\n    try {\n        const content = yield call(readAsText, action.blob);\n        yield put(uploadFileSuccess(content as FileContent));\n    } catch (error) {}\n}\n\nexport function* fileUploadSaga(): Generator<ForkEffect<never>> {\n    yield takeLatest(UPLOAD_FILE_REQUEST, uploadFile);\n}\n","import { UPLOAD_FILE_SUCCESS, UPLOAD_FILE_ERROR, State, CHANGE_RECORD_KEPT_STATE } from './types';\nimport { RootAction } from './actions';\nimport { FileContent } from '../fileUpload';\n\nconst defaultState: State = {\n    words: {},\n    error: undefined,\n};\n\nexport const parsedContentToWords = (content: FileContent): State['words'] => {\n    const wordInfos: State['words'] = {};\n    for (const word in content) {\n        wordInfos[word] = { score: content[word], kept: undefined };\n    }\n    return wordInfos;\n};\n\nexport const reducer = (state = defaultState, action: RootAction): State => {\n    switch (action.type) {\n        case UPLOAD_FILE_SUCCESS:\n            return { words: parsedContentToWords(action.content), error: undefined };\n        case UPLOAD_FILE_ERROR:\n            return { words: {}, error: action.error };\n        case CHANGE_RECORD_KEPT_STATE:\n            const newWords = { ...state.words };\n            newWords[action.word].kept = action.kept;\n            return {\n                error: undefined,\n                words: newWords,\n            };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { fileUploadSaga } from './state/sagas';\nimport { reducer } from './state/reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(fileUploadSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}