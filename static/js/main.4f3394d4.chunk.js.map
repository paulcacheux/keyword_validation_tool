{"version":3,"sources":["state/actions.ts","fileUpload.ts","api.ts","state/types.ts","components/UploadButton.tsx","components/FileUploadBox.tsx","components/ScoringTable.tsx","components/DownloadButton.tsx","components/OutputBox.tsx","ManualPage.tsx","DocumentList.tsx","RemotePage.tsx","App.tsx","serviceWorker.ts","state/reducers.ts","index.tsx"],"names":["AsyncStatus","readAsText","blob","Promise","resolve","reject","reader","FileReader","onload","content","result","parsedContent","JSON","parse","onerror","fetchSourceDocumentList","a","fetch","BASE_PATH","response","json","fetchSourceDocument","id","asyncSuccess","type","payload","status","SUCCESS","asyncError","error","ERROR","loadLocalFileRequest","dispatch","changeRecordKeptState","word","kept","useStyles","makeStyles","theme","button","margin","spacing","fileInput","display","UploadButton","classes","useDispatch","handleFileInput","event","files","target","Button","variant","color","component","className","startIcon","onChange","root","padding","FileUploadBox","Paper","elevation","Typography","marginTop","table","minWidth","head","backgroundColor","palette","primary","main","headCell","common","white","keptRow","success","light","removeRow","GreenButton","withStyles","getContrastText","green","marginRight","RedButton","red","YellowButton","yellow","ScoringRow","info","buttons","undefined","onClick","classRow","TableRow","TableCell","align","score","ScoringTable","useSelector","state","words","TableContainer","Table","aria-label","TableHead","TableBody","Object","keys","map","key","DownloadButton","fileName","data","hrefData","download","href","OutputBox","stringify","ManualPage","gridContainer","DocumentList","useState","documents","setDocuments","setError","useEffect","list","message","fetcher","Alert","severity","Link","to","Grid","container","doc","index","item","xs","sm","lg","Card","CardContent","name","CardActions","size","RemotePage","useParams","fetchRemoteFile","parseInt","title","flexGrow","marginBottom","Boolean","window","location","hostname","match","defaultState","localParsedContentToWords","wordInfos","remoteParsedContentToWords","store","createStore","action","newWords","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Fragment","CssBaseline","AppBar","position","Toolbar","Container","fixed","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4f3394d4.chunk.js","sourcesContent":["import { UPLOAD_FILE, CHANGE_RECORD_KEPT_STATE, FETCH_SOURCE_DOCUMENT } from './types';\nimport { FileContent, readAsText } from '../fileUpload';\nimport { State } from './types';\nimport { ThunkAction } from 'redux-thunk';\nimport { SourceDocumentData, fetchSourceDocument } from '../api';\n\nexport enum AsyncStatus {\n    SUCCESS,\n    ERROR,\n}\n\ninterface AsyncSuccessAction<T, P> {\n    type: T;\n    status: AsyncStatus.SUCCESS;\n    payload: P;\n}\n\ninterface AsyncErrorAction<T> {\n    type: T;\n    status: AsyncStatus.ERROR;\n    error: string;\n}\n\nexport type AsyncAction<T, P> = AsyncSuccessAction<T, P> | AsyncErrorAction<T>;\n\nexport type UploadFileAction = AsyncAction<typeof UPLOAD_FILE, FileContent>;\nexport type FetchSourceDocumentAction = AsyncAction<typeof FETCH_SOURCE_DOCUMENT, SourceDocumentData>;\n\ninterface ChangeRecordKeptStateAction {\n    type: typeof CHANGE_RECORD_KEPT_STATE;\n    word: string;\n    kept?: boolean;\n}\n\nexport type RootAction = UploadFileAction | FetchSourceDocumentAction | ChangeRecordKeptStateAction;\n\ntype ThunkResult<R> = ThunkAction<R, State, undefined, RootAction>;\n\nconst asyncSuccess = <T, P>(type: T, payload: P): AsyncAction<T, P> => {\n    return {\n        type,\n        status: AsyncStatus.SUCCESS,\n        payload,\n    };\n};\n\nconst asyncError = <T, P>(type: T, error: string): AsyncAction<T, P> => {\n    return {\n        type,\n        status: AsyncStatus.ERROR,\n        error,\n    };\n};\n\nexport const loadLocalFileRequest = (blob: Blob): ThunkResult<Promise<void>> => {\n    return async (dispatch): Promise<void> => {\n        try {\n            const content = await readAsText(blob);\n            dispatch(asyncSuccess(UPLOAD_FILE, content) as UploadFileAction);\n        } catch (error) {\n            dispatch(asyncError(UPLOAD_FILE, error) as UploadFileAction);\n        }\n    };\n};\n\nexport const fetchRemoteFile = (id: number): ThunkResult<Promise<void>> => {\n    return async (dispatch): Promise<void> => {\n        try {\n            const content = await fetchSourceDocument(id);\n            dispatch(asyncSuccess(FETCH_SOURCE_DOCUMENT, content) as FetchSourceDocumentAction);\n        } catch (error) {\n            dispatch(asyncError(FETCH_SOURCE_DOCUMENT, error) as FetchSourceDocumentAction);\n        }\n    };\n};\n\nexport const changeRecordKeptState = (word: string, kept?: boolean): ChangeRecordKeptStateAction => {\n    return {\n        type: CHANGE_RECORD_KEPT_STATE,\n        word,\n        kept,\n    };\n};\n","export interface FileContent {\n    [word: string]: number;\n}\n\nexport const readAsText = (blob: Blob): Promise<FileContent> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (): void => {\n            const content = reader.result;\n            if (typeof content === 'string') {\n                const parsedContent = JSON.parse(content);\n                resolve(parsedContent);\n            } else {\n                reject('Expected string file content');\n            }\n        };\n        reader.onerror = reject;\n        reader.readAsText(blob);\n    });\n};\n","const BASE_PATH = 'http://localhost:5000';\n\nexport type SourceDocumentList = Array<{ id: number; name: string }>;\n\nexport const fetchSourceDocumentList = async (): Promise<SourceDocumentList> => {\n    const response = await fetch(BASE_PATH + '/');\n    return response.json();\n};\n\nexport interface SourceDocumentData {\n    id: number;\n    name: string;\n    data: { [data: string]: number };\n}\n\nexport const fetchSourceDocument = async (id: number): Promise<SourceDocumentData> => {\n    const response = await fetch(BASE_PATH + '/' + id);\n    return response.json();\n};\n","export const UPLOAD_FILE = 'UPLOAD_FILE';\nexport const CHANGE_RECORD_KEPT_STATE = 'CHANGE_RECORD_KEPT_STATE';\nexport const FETCH_SOURCE_DOCUMENT = 'FETCH_SOURCE_DOCUMENT';\n\nexport interface WordInfo {\n    score: number;\n    kept?: boolean;\n}\n\nexport interface State {\n    words: {\n        [word: string]: WordInfo;\n    };\n    error?: string;\n}\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { useDispatch } from 'react-redux';\nimport { loadLocalFileRequest } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    fileInput: {\n        display: 'none',\n    },\n}));\n\nexport const UploadButton: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleFileInput = async (event: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const files = event.target.files;\n        if (files) {\n            dispatch(loadLocalFileRequest(files[0]));\n        }\n    };\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                color=\"default\"\n                component=\"label\"\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Upload\n                <input type=\"file\" className={classes.fileInput} onChange={handleFileInput} />\n            </Button>\n        </>\n    );\n};\n","import React from 'react';\nimport { Paper, Typography, makeStyles } from '@material-ui/core';\nimport { UploadButton } from './UploadButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}));\n\nexport const FileUploadBox: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Typography variant=\"h3\">File upload</Typography>\n            <UploadButton />\n        </Paper>\n    );\n};\n","import React from 'react';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    makeStyles,\n    Button,\n    withStyles,\n} from '@material-ui/core';\nimport { green, red, yellow } from '@material-ui/core/colors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State, WordInfo } from '../state/types';\nimport { changeRecordKeptState } from '../state/actions';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(2),\n    },\n    table: {\n        minWidth: 650,\n    },\n    head: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    headCell: {\n        color: theme.palette.common.white,\n    },\n    keptRow: {\n        backgroundColor: theme.palette.success.light,\n    },\n    removeRow: {\n        backgroundColor: theme.palette.error.light,\n    },\n}));\n\nconst GreenButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(green[500]),\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n        marginRight: '8px',\n    },\n}))(Button);\n\nconst RedButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(red[500]),\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n}))(Button);\n\nconst YellowButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(yellow[500]),\n        backgroundColor: yellow[500],\n        '&:hover': {\n            backgroundColor: yellow[700],\n        },\n    },\n}))(Button);\n\ninterface ScoringRowProps {\n    word: string;\n    info: WordInfo;\n}\n\nexport const ScoringRow: React.FC<ScoringRowProps> = ({ word, info }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleOk = (): void => {\n        dispatch(changeRecordKeptState(word, true));\n    };\n\n    const handleReject = (): void => {\n        dispatch(changeRecordKeptState(word, false));\n    };\n\n    const handleRestore = (): void => {\n        dispatch(changeRecordKeptState(word, undefined));\n    };\n\n    let buttons = null;\n    if (info.kept === undefined) {\n        buttons = (\n            <>\n                <GreenButton variant=\"contained\" onClick={handleOk}>\n                    OK\n                </GreenButton>\n                <RedButton variant=\"contained\" onClick={handleReject}>\n                    Reject\n                </RedButton>\n            </>\n        );\n    } else {\n        buttons = (\n            <>\n                <YellowButton variant=\"contained\" onClick={handleRestore}>\n                    Restore\n                </YellowButton>\n            </>\n        );\n    }\n\n    let classRow = '';\n    if (info.kept === true) {\n        classRow = classes.keptRow;\n    } else if (info.kept === false) {\n        classRow = classes.removeRow;\n    }\n\n    return (\n        <TableRow className={classRow}>\n            <TableCell align=\"left\">{word}</TableCell>\n            <TableCell align=\"right\">{info.score}</TableCell>\n            <TableCell align=\"right\">{buttons}</TableCell>\n        </TableRow>\n    );\n};\n\nexport const ScoringTable: React.FC = () => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    return (\n        <TableContainer component={Paper} className={classes.root} elevation={3}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow className={classes.head}>\n                        <TableCell align=\"left\" className={classes.headCell}>\n                            Word\n                        </TableCell>\n                        <TableCell align=\"right\" className={classes.headCell}>\n                            Score\n                        </TableCell>\n                        <TableCell></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(content).map(word => {\n                        return <ScoringRow key={word} word={word} info={content[word]} />;\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Button } from '@material-ui/core';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    fileInput: {\n        display: 'none',\n    },\n}));\n\ninterface DownloadButtonProps {\n    fileName: string;\n    data: string;\n}\n\nexport const DownloadButton: React.FC<DownloadButtonProps> = ({ fileName, data }) => {\n    const classes = useStyles();\n\n    const hrefData = 'data:text/plain;charset=utf-8,' + data;\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                component=\"a\"\n                color=\"default\"\n                download={fileName}\n                href={hrefData}\n                className={classes.button}\n                startIcon={<GetAppIcon />}\n            >\n                Download\n            </Button>\n        </>\n    );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { State } from '../state/types';\nimport { Paper, makeStyles, Typography } from '@material-ui/core';\nimport { DownloadButton } from './DownloadButton';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport const OutputBox: React.FC = () => {\n    const classes = useStyles();\n    const content = useSelector((state: State) => state.words);\n\n    const result: { [word: string]: number } = {};\n    for (const word in content) {\n        const info = content[word];\n        if (info.kept) {\n            result[word] = content[word].score;\n        }\n    }\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Typography variant=\"h3\">Output</Typography>\n            <DownloadButton fileName=\"output.json\" data={JSON.stringify(result)} />\n        </Paper>\n    );\n};\n","import React from 'react';\nimport { FileUploadBox } from './components/FileUploadBox';\nimport { ScoringTable } from './components/ScoringTable';\nimport { OutputBox } from './components/OutputBox';\n\nexport const ManualPage: React.FC = () => {\n    return (\n        <>\n            <FileUploadBox />\n            <ScoringTable />\n            <OutputBox />\n        </>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport { SourceDocumentList, fetchSourceDocumentList } from './api';\nimport { Alert } from '@material-ui/lab';\nimport { Card, Typography, CardContent, Grid, makeStyles, Button, CardActions } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n    gridContainer: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\nexport const DocumentList: React.FC = () => {\n    const classes = useStyles();\n\n    const [documents, setDocuments] = useState<SourceDocumentList>([]);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        async function fetcher(): Promise<void> {\n            try {\n                const list = await fetchSourceDocumentList();\n                setDocuments(list);\n                setError(null);\n            } catch (error) {\n                setError(error.message);\n                setDocuments([]);\n            }\n        }\n\n        fetcher();\n    }, []);\n\n    return (\n        <>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            <Button color=\"secondary\" variant=\"contained\" component={Link} to=\"/manual\">\n                Manual\n            </Button>\n            <Grid container spacing={2} className={classes.gridContainer}>\n                {documents.map((doc, index) => (\n                    <Grid item xs={12} sm={4} lg={3} key={index}>\n                        <Card elevation={3}>\n                            <CardContent>\n                                <Typography variant=\"h5\" component=\"h2\">\n                                    {doc.name}\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    component={Link}\n                                    to={`/${doc.id}`}\n                                >\n                                    Go\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n            </Grid>\n        </>\n    );\n};\n","import React from 'react';\nimport { ScoringTable } from './components/ScoringTable';\nimport { OutputBox } from './components/OutputBox';\nimport { useDispatch } from 'react-redux';\nimport { Paper, Typography, makeStyles } from '@material-ui/core';\nimport { fetchRemoteFile } from './state/actions';\nimport { useParams } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}));\n\nexport const RemotePage: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { id } = useParams();\n\n    if (id) {\n        dispatch(fetchRemoteFile(parseInt(id)));\n    }\n\n    return (\n        <>\n            <Paper elevation={3} className={classes.root}>\n                <Typography variant=\"h3\">{id}</Typography>\n            </Paper>\n\n            <ScoringTable />\n            <OutputBox />\n        </>\n    );\n};\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, Container, CssBaseline } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ManualPage } from './ManualPage';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport { DocumentList } from './DocumentList';\nimport { RemotePage } from './RemotePage';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\nexport const App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Keyword Validation Tool\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed className={classes.container}>\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <DocumentList />\n                        </Route>\n                        <Route path=\"/manual\">\n                            <ManualPage />\n                        </Route>\n                        <Route path=\"/:id\">\n                            <RemotePage />\n                        </Route>\n                    </Switch>\n                </Router>\n            </Container>\n        </React.Fragment>\n    );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import { UPLOAD_FILE, State, CHANGE_RECORD_KEPT_STATE, FETCH_SOURCE_DOCUMENT } from './types';\nimport { RootAction, AsyncStatus } from './actions';\nimport { FileContent } from '../fileUpload';\nimport { SourceDocumentData } from '../api';\n\nconst defaultState: State = {\n    words: {},\n    error: undefined,\n};\n\nexport const localParsedContentToWords = (content: FileContent): State['words'] => {\n    const wordInfos: State['words'] = {};\n    for (const word in content) {\n        wordInfos[word] = { score: content[word], kept: undefined };\n    }\n    return wordInfos;\n};\n\nexport const remoteParsedContentToWords = (content: SourceDocumentData): State['words'] => {\n    return localParsedContentToWords(content.data);\n};\n\nexport const reducer = (state = defaultState, action: RootAction): State => {\n    switch (action.type) {\n        case UPLOAD_FILE:\n            switch (action.status) {\n                case AsyncStatus.SUCCESS:\n                    return { words: localParsedContentToWords(action.payload), error: undefined };\n                case AsyncStatus.ERROR:\n                    return { words: {}, error: action.error };\n                default:\n                    return state;\n            }\n\n        case FETCH_SOURCE_DOCUMENT:\n            switch (action.status) {\n                case AsyncStatus.SUCCESS:\n                    return { words: remoteParsedContentToWords(action.payload), error: undefined };\n                case AsyncStatus.ERROR:\n                    return { words: {}, error: action.error };\n                default:\n                    return state;\n            }\n        case CHANGE_RECORD_KEPT_STATE:\n            const newWords = { ...state.words };\n            newWords[action.word].kept = action.kept;\n            return {\n                error: undefined,\n                words: newWords,\n            };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './state/reducers';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}